Index: app/src/main/java/ru/practicum/android/diploma/presentation/search/SearchFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.presentation.search\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.KeyEvent\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.EditorInfo\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity.INPUT_METHOD_SERVICE\r\nimport androidx.core.os.bundleOf\r\nimport androidx.core.view.isVisible\r\nimport androidx.core.widget.doOnTextChanged\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.Lifecycle\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.lifecycle.repeatOnLifecycle\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport kotlinx.coroutines.launch\r\nimport org.koin.androidx.viewmodel.ext.android.viewModel\r\nimport ru.practicum.android.diploma.R\r\nimport ru.practicum.android.diploma.databinding.FragmentSearchBinding\r\nimport ru.practicum.android.diploma.domain.models.main.VacancyShort\r\nimport ru.practicum.android.diploma.presentation.VacancyAdapter\r\nimport ru.practicum.android.diploma.util.debounce\r\n\r\nclass SearchFragment : Fragment() {\r\n    private var _binding: FragmentSearchBinding? = null\r\n    private val binding get() = _binding ?: error(\"Binding is not initialized\")\r\n    private val searchViewModel by viewModel<SearchViewModel>()\r\n    private var debouncedSearch: ((String) -> Unit)? = null\r\n    private var debouncedClick: ((VacancyShort) -> Unit)? = null\r\n    private var searchQuery: String = \"\"\r\n    private var isDebounceEnabled = true\r\n    private val adapter: VacancyAdapter = VacancyAdapter(\r\n        onItemClickListener = { vacancy ->\r\n            if (isDebounceEnabled) {\r\n                isDebounceEnabled = false\r\n                navigateToVacancyScreen(vacancy)\r\n                debouncedClick?.let { it(vacancy) }\r\n            }\r\n        }\r\n    )\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentSearchBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        with(binding) {\r\n            recyclerView.layoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)\r\n\r\n            debounceFunc()\r\n            editText()\r\n            setupBindings()\r\n            observeSearchState()\r\n            observeToastFlow()\r\n        }\r\n    }\r\n\r\n    private fun observeSearchState() {\r\n        viewLifecycleOwner.lifecycleScope.launch {\r\n            searchViewModel.searchState.collect { state ->\r\n                renderState(state)\r\n                Log.d(\"SearchFragment\", \"$state\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun observeToastFlow() {\r\n        lifecycleScope.launch {\r\n            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {\r\n                searchViewModel.toastFlow.collect {\r\n                    Toast.makeText(requireContext(), it, Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun renderState(state: SearchState) {\r\n        when {\r\n            state.isInitialLoading -> binding.stateLayout.show(ViewState.LOADING)\r\n            state.error != null -> binding.stateLayout.show(ViewState.ERROR, state.error)\r\n            state.content.isNullOrEmpty() -> binding.stateLayout.show(ViewState.EMPTY)\r\n            else -> {\r\n                binding.stateLayout.show(ViewState.CONTENT)\r\n\r\n            }\r\n        }\r\n        adapter.updateVacancies(\r\n            newVacancies = state.content.orEmpty(),\r\n            showHeaderLoading = state.isRefreshing,\r\n            showFooterLoading = state.isNextPageLoading\r\n        )\r\n        binding.vacanciesFoundText.apply {\r\n            text = state.resultText\r\n            visibility = if (state.showResultText) View.VISIBLE else View.GONE\r\n        }\r\n    }\r\n\r\n    private fun editText() {\r\n        binding.searchField.doOnTextChanged { text, _, _, _ ->\r\n            searchQuery = text.toString()\r\n            binding.clearFieldButton.isVisible = searchQuery.isNotBlank()\r\n            binding.searchImage.isVisible = searchQuery.isBlank()\r\n\r\n            if (searchQuery.isBlank()) {\r\n                searchViewModel.clearSearch()\r\n                isDebounceEnabled = false\r\n            } else {\r\n                isDebounceEnabled = true\r\n                debouncedSearch?.invoke(searchQuery)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun debounceFunc() {\r\n        debouncedSearch = debounce(\r\n            delayMillis = SEARCH_DEBOUNCE_DELAY,\r\n            coroutineScope = viewLifecycleOwner.lifecycleScope,\r\n            useLastParam = true\r\n        ) {\r\n            if (isDebounceEnabled) {\r\n                searchViewModel.searchVacancy(searchQuery)\r\n                toggleKeyboard(binding.searchField, false)\r\n            }\r\n        }\r\n        debouncedClick = debounce(\r\n            delayMillis = CLICK_DEBOUNCE_DELAY,\r\n            coroutineScope = viewLifecycleOwner.lifecycleScope,\r\n            useLastParam = true,\r\n        ) {\r\n            isDebounceEnabled = true\r\n        }\r\n    }\r\n\r\n    private fun setupBindings() {\r\n        binding.stateLayout.apply {\r\n            setLoadingView(R.layout.placeholder_loading)\r\n            setEmptyView(R.layout.placeholder_search_new)\r\n            setErrorView(UiError.NoConnection::class.java, R.layout.placeholder_no_internet)\r\n            setErrorView(UiError.BadRequest::class.java, R.layout.placeholder_no_vacancies_list)\r\n            setErrorView(UiError.ServerError::class.java, R.layout.placeholder_server_error_search)\r\n        }\r\n        binding.recyclerView.adapter = adapter\r\n        binding.searchField.post {\r\n            binding.searchField.requestFocus()\r\n            toggleKeyboard(binding.searchField, true)\r\n        }\r\n        binding.clearFieldButton.setOnClickListener {\r\n            binding.searchField.text.clear()\r\n            binding.searchField.post {\r\n                binding.searchField.requestFocus()\r\n                toggleKeyboard(binding.searchField, true)\r\n            }\r\n        }\r\n        binding.searchField.setOnEditorActionListener { v, actionId, event ->\r\n            val isActionSearch = actionId == EditorInfo.IME_ACTION_SEARCH\r\n            val isActionDone = actionId == EditorInfo.IME_ACTION_DONE\r\n            val isEnterKey = event?.keyCode == KeyEvent.KEYCODE_ENTER && event.action == KeyEvent.ACTION_DOWN\r\n            if (isActionSearch || isActionDone || isEnterKey) {\r\n                isDebounceEnabled = false\r\n                searchViewModel.searchVacancy(searchQuery)\r\n                toggleKeyboard(v, false)\r\n                true\r\n            } else {\r\n                false\r\n            }\r\n        }\r\n        binding.recyclerView.addOnScrollListener(object : RecyclerView.OnScrollListener() {\r\n\r\n            override fun onScrolled(rv: RecyclerView, dx: Int, dy: Int) {\r\n                super.onScrolled(rv, dx, dy)\r\n\r\n                val state = searchViewModel.searchState.value\r\n                val layoutManager = rv.layoutManager as? LinearLayoutManager ?: return\r\n                val lastVisible = layoutManager.findLastVisibleItemPosition()\r\n                val firstVisible = layoutManager.findFirstCompletelyVisibleItemPosition()\r\n                val totalItems = adapter.itemCount\r\n\r\n                if (lastVisible >= totalItems - THRESHOLD) {\r\n                    searchViewModel.loadNextPage()\r\n                }\r\n\r\n                val isPullDown = dy < 0 && firstVisible == 0\r\n                val isStateIdle = !state.isRefreshing\r\n                    && !state.isInitialLoading\r\n                    && !state.isLoading\r\n\r\n                if (isPullDown && isStateIdle) {\r\n                    searchViewModel.refreshSearch()\r\n                }\r\n            }\r\n        })\r\n        binding.toFiltersButton.setOnClickListener {\r\n            findNavController().navigate(R.id.action_navigation_main_to_navigation_filters)\r\n        }\r\n    }\r\n\r\n    private fun toggleKeyboard(view: View, show: Boolean) {\r\n        val imm = requireActivity().getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager\r\n        if (show) {\r\n            view.post {\r\n                imm.showSoftInput(view, InputMethodManager.SHOW_IMPLICIT)\r\n            }\r\n\r\n        } else {\r\n            imm.hideSoftInputFromWindow(view.windowToken, 0)\r\n        }\r\n    }\r\n\r\n    private fun navigateToVacancyScreen(vacancy: VacancyShort) {\r\n        val args = bundleOf(\"vacancyId\" to vacancy.vacancyId)\r\n        findNavController().navigate(R.id.action_navigation_main_to_navigation_vacancy, args)\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        if (searchQuery.isBlank()) {\r\n            binding.searchField.requestFocus()\r\n            toggleKeyboard(binding.searchField, true)\r\n        } else {\r\n            searchViewModel.searchVacancy(searchQuery)\r\n        }\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n    companion object {\r\n        private const val SEARCH_DEBOUNCE_DELAY = 2000L\r\n        private const val CLICK_DEBOUNCE_DELAY = 500L\r\n        private const val THRESHOLD = 2\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/presentation/search/SearchFragment.kt b/app/src/main/java/ru/practicum/android/diploma/presentation/search/SearchFragment.kt
--- a/app/src/main/java/ru/practicum/android/diploma/presentation/search/SearchFragment.kt	(revision 40c33df0f3a924463b4f13674b3963047edffea3)
+++ b/app/src/main/java/ru/practicum/android/diploma/presentation/search/SearchFragment.kt	(date 1745437812452)
@@ -38,11 +38,11 @@
     private var isDebounceEnabled = true
     private val adapter: VacancyAdapter = VacancyAdapter(
         onItemClickListener = { vacancy ->
-            if (isDebounceEnabled) {
+
                 isDebounceEnabled = false
                 navigateToVacancyScreen(vacancy)
                 debouncedClick?.let { it(vacancy) }
-            }
+
         }
     )
 
Index: app/src/main/java/ru/practicum/android/diploma/di/AppModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.di\r\n\r\nimport org.koin.androidx.viewmodel.dsl.viewModel\r\nimport org.koin.dsl.module\r\nimport ru.practicum.android.diploma.presentation.favorites.FavoriteViewModel\r\nimport ru.practicum.android.diploma.presentation.search.SearchViewModel\r\n\r\nval appModule = module {\r\n\r\n    viewModel { SearchViewModel(get(), get()) }\r\n    viewModel { FavoriteViewModel(get()) }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/di/AppModule.kt b/app/src/main/java/ru/practicum/android/diploma/di/AppModule.kt
--- a/app/src/main/java/ru/practicum/android/diploma/di/AppModule.kt	(revision 40c33df0f3a924463b4f13674b3963047edffea3)
+++ b/app/src/main/java/ru/practicum/android/diploma/di/AppModule.kt	(date 1745438336579)
@@ -4,9 +4,11 @@
 import org.koin.dsl.module
 import ru.practicum.android.diploma.presentation.favorites.FavoriteViewModel
 import ru.practicum.android.diploma.presentation.search.SearchViewModel
+import ru.practicum.android.diploma.presentation.vacancy.VacancyViewModel
 
 val appModule = module {
 
     viewModel { SearchViewModel(get(), get()) }
     viewModel { FavoriteViewModel(get()) }
+    viewModel { VacancyViewModel(get()) }
 }
Index: app/schemas/ru.practicum.android.diploma.data.db.FavoriteVacanciesDatabase/1.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"formatVersion\": 1,\r\n  \"database\": {\r\n    \"version\": 1,\r\n    \"identityHash\": \"38fa03116ad933c3941d358edd1da760\",\r\n    \"entities\": [\r\n      {\r\n        \"tableName\": \"Favorite_vacancies_table\",\r\n        \"createSql\": \"CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`vacancy_id` TEXT NOT NULL, `company_logo` TEXT DEFAULT 'empty', `vacancy_name` TEXT NOT NULL DEFAULT 'unknown', `area_name` TEXT NOT NULL DEFAULT 'unknown', `company_name` TEXT NOT NULL DEFAULT 'unknown', `salary` TEXT NOT NULL DEFAULT 'Зарплата не указана', `postedAt` TEXT NOT NULL DEFAULT 'unknown', PRIMARY KEY(`vacancy_id`))\",\r\n        \"fields\": [\r\n          {\r\n            \"fieldPath\": \"vacancyId\",\r\n            \"columnName\": \"vacancy_id\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true\r\n          },\r\n          {\r\n            \"fieldPath\": \"logoUrl\",\r\n            \"columnName\": \"company_logo\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": false,\r\n            \"defaultValue\": \"'empty'\"\r\n          },\r\n          {\r\n            \"fieldPath\": \"name\",\r\n            \"columnName\": \"vacancy_name\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true,\r\n            \"defaultValue\": \"'unknown'\"\r\n          },\r\n          {\r\n            \"fieldPath\": \"areaName\",\r\n            \"columnName\": \"area_name\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true,\r\n            \"defaultValue\": \"'unknown'\"\r\n          },\r\n          {\r\n            \"fieldPath\": \"employerName\",\r\n            \"columnName\": \"company_name\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true,\r\n            \"defaultValue\": \"'unknown'\"\r\n          },\r\n          {\r\n            \"fieldPath\": \"salary\",\r\n            \"columnName\": \"salary\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true,\r\n            \"defaultValue\": \"'Зарплата не указана'\"\r\n          },\r\n          {\r\n            \"fieldPath\": \"postedAt\",\r\n            \"columnName\": \"postedAt\",\r\n            \"affinity\": \"TEXT\",\r\n            \"notNull\": true,\r\n            \"defaultValue\": \"'unknown'\"\r\n          }\r\n        ],\r\n        \"primaryKey\": {\r\n          \"autoGenerate\": false,\r\n          \"columnNames\": [\r\n            \"vacancy_id\"\r\n          ]\r\n        },\r\n        \"indices\": [],\r\n        \"foreignKeys\": []\r\n      }\r\n    ],\r\n    \"views\": [],\r\n    \"setupQueries\": [\r\n      \"CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)\",\r\n      \"INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '38fa03116ad933c3941d358edd1da760')\"\r\n    ]\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/schemas/ru.practicum.android.diploma.data.db.FavoriteVacanciesDatabase/1.json b/app/schemas/ru.practicum.android.diploma.data.db.FavoriteVacanciesDatabase/1.json
--- a/app/schemas/ru.practicum.android.diploma.data.db.FavoriteVacanciesDatabase/1.json	(revision 40c33df0f3a924463b4f13674b3963047edffea3)
+++ b/app/schemas/ru.practicum.android.diploma.data.db.FavoriteVacanciesDatabase/1.json	(date 1745437360663)
@@ -2,11 +2,11 @@
   "formatVersion": 1,
   "database": {
     "version": 1,
-    "identityHash": "38fa03116ad933c3941d358edd1da760",
+    "identityHash": "13148fdfad9780a72fd6163e71e360a8",
     "entities": [
       {
         "tableName": "Favorite_vacancies_table",
-        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`vacancy_id` TEXT NOT NULL, `company_logo` TEXT DEFAULT 'empty', `vacancy_name` TEXT NOT NULL DEFAULT 'unknown', `area_name` TEXT NOT NULL DEFAULT 'unknown', `company_name` TEXT NOT NULL DEFAULT 'unknown', `salary` TEXT NOT NULL DEFAULT 'Зарплата не указана', `postedAt` TEXT NOT NULL DEFAULT 'unknown', PRIMARY KEY(`vacancy_id`))",
+        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`vacancy_id` TEXT NOT NULL, `company_logo` TEXT DEFAULT 'empty', `vacancy_name` TEXT NOT NULL DEFAULT 'unknown', `area_name` TEXT NOT NULL DEFAULT 'unknown', `company_name` TEXT NOT NULL DEFAULT 'unknown', `salary` TEXT NOT NULL DEFAULT 'Зарплата не указана', `postedAt` TEXT NOT NULL DEFAULT 'unknown', `date_of_adding` INTEGER NOT NULL, PRIMARY KEY(`vacancy_id`))",
         "fields": [
           {
             "fieldPath": "vacancyId",
@@ -55,6 +55,12 @@
             "affinity": "TEXT",
             "notNull": true,
             "defaultValue": "'unknown'"
+          },
+          {
+            "fieldPath": "createdAt",
+            "columnName": "date_of_adding",
+            "affinity": "INTEGER",
+            "notNull": true
           }
         ],
         "primaryKey": {
@@ -70,7 +76,7 @@
     "views": [],
     "setupQueries": [
       "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
-      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '38fa03116ad933c3941d358edd1da760')"
+      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '13148fdfad9780a72fd6163e71e360a8')"
     ]
   }
-}
+}
\ No newline at end of file
